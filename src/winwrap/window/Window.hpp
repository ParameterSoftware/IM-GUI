#pragma once
#ifndef HID_Oc8c7uM3PEHzRf2
#define HID_Oc8c7uM3PEHzRf2
#include "../monitor/Monitor.hpp"
#include "../util/Key.hpp"
#include "../util/Vector.hpp"
#include "../util/Event.hpp"
#include "WEvent.hpp"
#include <GLFW/glfw3.h>
namespace Imgui
{
class Window
{
	GLFWwindow* mp_window;
	EventBus<Window, Win::Event::WindowEvent, Win::EIndex::SIZE> m_bus;
public:
	/// Represents a null, or empty, window
	static Window null;

	////////////////////////////////////////////////////////////////////////////////////////
	/// Create a Window from a pre-existing GLFWwindow pointer
	///
	////////////////////////////////////////////////////////////////////////////////////////
	Window(GLFWwindow* window);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Create a Window from a specific parameters for the window
	///
	////////////////////////////////////////////////////////////////////////////////////////
	Window(int width, int height, const char* title, Monitor monitor = Monitor::GetPrimary(), Window share = Window::null);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Destroys the Window, calls glfwDestroyWindow
	///
	////////////////////////////////////////////////////////////////////////////////////////
	~Window();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Determines whether the window should be closed
	///
	/// \note Does not handle window closing
	////////////////////////////////////////////////////////////////////////////////////////
	bool ShouldClose();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets whether the window should be closed
	///
	////////////////////////////////////////////////////////////////////////////////////////
	void SetShouldClose(int value);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets the title of the window
	///
	/// \note Throws a Imgui::Win::Event::RetitleEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void SetTitle(const char* title);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Gets the title of the window
	///
	////////////////////////////////////////////////////////////////////////////////////////
	const char GetTitle();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the window position, reporting it in a Vec2I
	///
	////////////////////////////////////////////////////////////////////////////////////////
	Vec2I GetPosition();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets the window's position
	///
	/// \note Throws a Imgui::Win::Event::Vec2IEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void SetPosition(Vec2I position);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the window size
	///
	////////////////////////////////////////////////////////////////////////////////////////
	Vec2I GetSize();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets the window's size
	///
	/// \note Thorws a Imgui::Win::Event::Vec2IEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void SetSize(Vec2I size);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the window buffer size
	///
	////////////////////////////////////////////////////////////////////////////////////////
	Vec2I GetBufferSize();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets the window's size limits
	///
	////////////////////////////////////////////////////////////////////////////////////////
	void SetSizeLimits(Vec2I min, Vec2I max);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Iconifies the window
	///
	/// \note Throws a Imgui::Win::Event::WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void Iconify();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Restores the window
	///
	/// \note Throws a Imgui::Win::Event::WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void Restore();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Maximizes the window
	///
	/// \note Throws a Imgui::Win::Event::WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void Maximize();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Shows the window
	///
	/// \note Throws a Imgui::Win::Event::WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void Show();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Hides the window
	///
	/// \note Throws a Imgui::Win::Event::WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void Hide();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Focuses the window
	///
	/// \note Throws a Imgui::Win::Event::WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void Focus();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the fullscreen monitor, or a NULL monitor
	///
	////////////////////////////////////////////////////////////////////////////////////////
	Monitor GetMonitor();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves an attribute value from an attribute integer
	///
	////////////////////////////////////////////////////////////////////////////////////////
	int GetAttributes(int attribVal);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves an input mode value from an attribute integer
	///
	////////////////////////////////////////////////////////////////////////////////////////
	int GetInputMode(int modeType);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets  an input mode value using an attribute integer
	///
	/// \note Throws Imgui::Win::Event
	////////////////////////////////////////////////////////////////////////////////////////
	void SetInputMode(int modeType, int value);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves whether a key is down or not based on the specific key index
	///
	////////////////////////////////////////////////////////////////////////////////////////
	int GetKey(Key key);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves a mouse button's value based on its index
	///
	////////////////////////////////////////////////////////////////////////////////////////
	int GetMouseButton(int buttonIndex);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the position of the cursor
	///
	////////////////////////////////////////////////////////////////////////////////////////
	Vec2D GetCursorPosition();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets the position of the cursor
	///
	////////////////////////////////////////////////////////////////////////////////////////
	void SetCursorPosition(Vec2D position);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Sets the clipboard's string
	///
	////////////////////////////////////////////////////////////////////////////////////////
	void SetClipboardString(const char* string);
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the clipboard's string
	///
	////////////////////////////////////////////////////////////////////////////////////////
	const char* GetClipboardString();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Makes the specific window context current
	///
	////////////////////////////////////////////////////////////////////////////////////////
	void MakeCurrent();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the current main window context
	///
	////////////////////////////////////////////////////////////////////////////////////////
	static Window GetCurrentContext();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Swaps buffers for window context
	///
	/// \note Thorws a Imgui::Win::Event::WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	void SwapBuffers();
	////////////////////////////////////////////////////////////////////////////////////////
	/// Registers the event to the event index
	///
	/// Recommended Event extend WindowEvent
	////////////////////////////////////////////////////////////////////////////////////////
	template<class Event>
	void SetEventFunction(EventIndex::Index index) { m_bus.RegsterEvent<Event>(this, index); }
	////////////////////////////////////////////////////////////////////////////////////////
	/// Retrieves the GLFWwindow pointer of the window
	///
	////////////////////////////////////////////////////////////////////////////////////////
	GLFWwindow* GetPointer();

	operator GLFWwindow*() { return this->GetPointer(); }
};
}// namespace Imgui
#endif